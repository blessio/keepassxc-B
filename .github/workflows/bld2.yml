# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Windows-Only-MatrixBased

on:
  push:
    branches: [ "develop", "devbleo" ]
  pull_request:
    branches: [ "devbleo" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [windows-latest] # [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            vcpkg_triplet: x64-windows-release
          #  - os: macos-11
          #  vcpkg_triplet: x64-osx-release
          #- os: ubuntu-latest
          #  c_compiler: gcc
          #  cpp_compiler: g++
          #- os: ubuntu-latest
          #  c_compiler: clang
          #  cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          #- os: ubuntu-latest
          #  c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Install Winget
      uses: Cyberboss/install-winget@v1

    - name: Set Up windows SDK 
      run: winget install --source winget --exact --id Microsoft.WindowsSDK.10.0.26100 
    
    - name: Set reusable strings
    # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "build-root-vcpkg-dir=_vpkg"  >> "$GITHUB_OUTPUT"

    - name: vcpkg build
      id: vcpkg
      uses: blessio/vcpkg-actionB
      with:
        manifest-dir: ${{ github.workspace }} # Set to directory containing vcpkg.json
        triplet:  ${{ matrix.config.vcpkg_triplet }} # x64-windows-release
        token: ${{ github.token }}
        github-binarycache: true
        vcpkg-subdir: ${{ steps.strings.outputs.build-root-vcpkg-dir}}
        cache-key: kpxcbleo 

    - name: Configure CMake
    # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    # -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
    # -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
    # -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
    # "$ENV:VCPKG_ROOT"\scripts\buildsystems\vcpkg.cmake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DWITH_XC_ALL=ON
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}\${{ steps.strings.outputs.build-root-vcpkg-dir}}\scripts\buildsystems\vcpkg.cmake  
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
