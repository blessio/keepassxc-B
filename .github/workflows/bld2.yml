# Used the starter here:
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
# BUILDS KeepasXC 
name: Windows-Only-MatrixBased

on:
  push:
    branches: [ "develop", "devbleo2", "bleo7" ]
  pull_request:
    branches: [ "devbleo" ]

jobs:
  build:
    runs-on: ${{ matrix.config.os }}
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        config:
        - os: [windows-2022] #[windows-latest] # [ubuntu-latest, windows-latest]
          build_type: Release
          vcpkg_triplet: x64-windows
          github-binarycache: true   

    steps:

    - name: Set reusable strings and Environment for actions
     # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "build-root-vcpkg-dir=_vpkg"  >> "$GITHUB_OUTPUT"
        echo "build-winsdk=10.0.26100" >> "$GITHUB_OUTPUT"
        echo "FORCE_JAVASCRIPT_ACTIONS_TO_NODE20=true"  >> "$GITHUB_OUTPUT"
        echo " TRIPLET IS ${{ matrix.config.vcpkg_triplet }}"
  
    - name: get from Git
      uses: actions/checkout@v4

    - name: Install Winget
      uses: Cyberboss/install-winget@v1

    - name: Set Up windows SDK and Ruby and the needed gem of asciidoctor 
      run: | 
        winget install --source winget --exact --id Microsoft.WindowsSDK.${{ steps.strings.outputs.build-winsdk }} --silent
        winget install RubyInstallerTeam.Ruby.3.2 --accept-package-agreements --accept-source-agreements
        gem install asciidoctor

    - name: Set environment variable VCPKG_ROOT
      run: |
        $env:VCPKG_ROOT = "$env:VCPKG_INSTALLATION_ROOT"
        echo "VCPKG_ROOT=$env:VCPKG_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      
    - name: vcpkg build
      id: vcpkg
      uses: blessio/vcpkg-actionB@vbleo7.0
      with:
        manifest-dir: ${{ github.workspace }}        # Set to directory containing vcpkg.json
        triplet:  ${{ matrix.config.vcpkg_triplet }} # x64-windows-release
        token: ${{ github.token }}
        github-binarycache: true
        vcpkg-subdir: ${{ steps.strings.outputs.build-root-vcpkg-dir}}
        cache-key: "kpxco5-${{ matrix.config.vcpkg_triplet }}"
        fetch-depth: "0"
    
    - name: Print intermediate environment results 
      shell: bash
      run: |   
        echo  " *** RECOMENDED CMAKE CONFIG is ${{ steps.vcpkg.outputs.vcpkg-cmake-config }}"  
        echo  " *** HASH IS ${{ steps.vcpkg.outputs.vcpkg-cache-hash }}"                       
    
    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }} 
        -DWITH_XC_ALL=ON -DCMAKE_SYSTEM_VERSION=${{ steps.strings.outputs.build-winsdk }} 
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}\${{ steps.strings.outputs.build-root-vcpkg-dir}}\scripts\buildsystems\vcpkg.cmake 
        -S ${{ github.workspace }}
     
    - name: Check DiskSpace 
      run: > 
        Get-PSDrive -PSProvider FileSystem | Select-Object Name, @{Name="Used (GB)";Expression={[math]::round($_.Used/1GB,2)}},
        @{Name="Free (GB)";Expression={[math]::round($_.Free/1GB,2)}}
    
    - name: Print all environement Variables
      run: >
        Get-ChildItem Env: | Sort-Object Name

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
        cd ${{ steps.strings.outputs.build-output-dir }}
        cmake --build . --config ${{ matrix.config.build_type }}  

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.config.build_type }}
